In gitbash

ssh-keygen -t ed25519 -C "zyxwv@duck.com"


# start the ssh-agent in the background
Get-Service -Name ssh-agent | Set-Service -StartupType Manual
Start-Service ssh-agent

ssh-add c:/Users/YOU/.ssh/id_ed25519


$ clip < ~/.ssh/id_ed25519.pub
# Copies the contents of the id_ed25519.pub file to your clipboard

$ git commit -S -m "YOUR_COMMIT_MESSAGE"
# Creates a signed commit

$ git push
# Pushes your local commits to the remote repository


https://docs.github.com/en/authentication/managing-commit-signature-verification/checking-for-existing-gpg-keys
Supported GPG key algorithms
GitHub supports several GPG key algorithms. If you try to add a key generated with an unsupported algorithm, you may encounter an error.

RSA
ElGamal
DSA
ECDH
ECDSA
EdDSA
Note: GPG does not come installed by default on macOS or Windows. To install GPG command line tools, see GnuPG's Download page.

Open Git Bash.

Use the gpg --list-secret-keys --keyid-format=long command to list the long form of the GPG keys for which you have both a public and private key. A private key is required for signing commits or tags.

Shell
gpg --list-secret-keys --keyid-format=long
Note: Some GPG installations on Linux may require you to use gpg2 --list-keys --keyid-format LONG to view a list of your existing keys instead. In this case you will also need to configure Git to use gpg2 by running git config --global gpg.program gpg2.

Check the command output to see if you have a GPG key pair.

If there are no GPG key pairs or you don't want to use any that are available for signing commits and tags, then generate a new GPG key.

If there's an existing GPG key pair and you want to use it to sign commits and tags, you can display the public key using the following command, substituting in the GPG key ID you'd like to use. In this example, the GPG key ID is 3AA5C34371567BD2:

$ gpg --armor --export 3AA5C34371567BD2
# Prints the GPG key ID, in ASCII armor format



https://docs.github.com/en/authentication/managing-commit-signature-verification/generating-a-new-gpg-key

Generating a GPG key
Note: Before generating a new GPG key, make sure you've verified your email address. If you haven't verified your email address, you won't be able to sign commits and tags with GPG. For more information, see "Verifying your email address."

Download and install the GPG command line tools for your operating system. We generally recommend installing the latest version for your operating system.

Open Git Bash.

Generate a GPG key pair. Since there are multiple versions of GPG, you may need to consult the relevant man page to find the appropriate key generation command.

If you are on version 2.1.17 or greater, paste the text below to generate a GPG key pair.

Shell
gpg --full-generate-key
If you are not on version 2.1.17 or greater, the gpg --full-generate-key command doesn't work. Paste the text below and skip to step 6.

Shell
gpg --default-new-key-algo rsa4096 --gen-key
At the prompt, specify the kind of key you want, or press Enter to accept the default.

At the prompt, specify the key size you want, or press Enter to accept the default.

Enter the length of time the key should be valid. Press Enter to specify the default selection, indicating that the key doesn't expire. Unless you require an expiration date, we recommend accepting this default.

Verify that your selections are correct.

Enter your user ID information.

Note: When asked to enter your email address, ensure that you enter the verified email address for your GitHub account. To keep your email address private, use your GitHub-provided no-reply email address. For more information, see "Verifying your email address" and "Setting your commit email address."

Type a secure passphrase.

Use the gpg --list-secret-keys --keyid-format=long command to list the long form of the GPG keys for which you have both a public and private key. A private key is required for signing commits or tags.

Shell
gpg --list-secret-keys --keyid-format=long
Note: Some GPG installations on Linux may require you to use gpg2 --list-keys --keyid-format LONG to view a list of your existing keys instead. In this case you will also need to configure Git to use gpg2 by running git config --global gpg.program gpg2.

From the list of GPG keys, copy the long form of the GPG key ID you'd like to use. In this example, the GPG key ID is 3AA5C34371567BD2:

Shell

$ gpg --list-secret-keys --keyid-format=long
/Users/hubot/.gnupg/secring.gpg
------------------------------------
sec   4096R/3AA5C34371567BD2 2016-03-10 [expires: 2017-03-10]
uid                          Hubot <hubot@example.com>
ssb   4096R/4BB6D45482678BE3 2016-03-10
Paste the text below, substituting in the GPG key ID you'd like to use. In this example, the GPG key ID is 3AA5C34371567BD2:

gpg --armor --export 3AA5C34371567BD2
# Prints the GPG key ID, in ASCII armor format
Copy your GPG key, beginning with -----BEGIN PGP PUBLIC KEY BLOCK----- and ending with -----END PGP PUBLIC KEY BLOCK-----.


https://docs.github.com/en/authentication/managing-commit-signature-verification/adding-a-gpg-key-to-your-github-account





To use the GPG command line to export your public and private keys, as well as the revocation certificate, you can follow these steps:

Export Public Key:

bash
Copy code
gpg --export -a "Your Name" > public_key.asc
Replace "Your Name" with your actual name or the name associated with your key. This command exports your public key in ASCII armor format to a file named public_key.asc.

Export Private Key:

bash
Copy code
gpg --export-secret-keys -a "Your Name" > private_key.asc
Again, replace "Your Name" with your actual name. This command exports your private key in ASCII armor format to a file named private_key.asc.

Export Revocation Certificate:

bash
Copy code
gpg --gen-revoke "Your Name" > revocation_cert.asc
Once more, replace "Your Name" with the appropriate name. This command generates a revocation certificate and saves it to a file named revocation_cert.asc.

Remember to keep your private key secure and not share it with others. The revocation certificate is essential in case you need to revoke your key in the future. Store these files in a safe location.

If you have a key ID instead of a name, you can use the key ID in place of the name in the commands.

Feel free to ask if you have any specific questions or if there's anything else you'd like to know!